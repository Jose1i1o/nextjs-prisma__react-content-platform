generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accountPoints  Int       @default(0)

  accounts Account[]
  sessions Session[]
  reviews  Reviews[]
  moduleProgress UserModuleProgress[]
  sectionProgress UserSectionProgress[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @db.String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionToken])
}

model UserModuleProgress {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  moduleId          String  @db.ObjectId
  completionStatus  String
  progress          Int

  user              User   @relation(fields: [userId], references: [id])
  module            Module @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
}

model Module {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  moduleTitle       String
  moduleItem        String       
  title             String         
  completionStatus  String        
  progress          Int      
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sections          Section[]      
  reviews           Reviews[]
  userModuleProgress UserModuleProgress[]
}

model UserSectionProgress {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  sectionId         String  @db.ObjectId
  completionStatus  String

  user    User    @relation(fields: [userId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])

  @@unique([userId, sectionId])
}

model Section {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleId        String   @db.ObjectId
  title           String
  completionStatus String
  points          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  module          Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  userProgress    UserSectionProgress[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  moduleId  String   @db.ObjectId
  sectionId String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module  Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [userId], references: [id])
}
